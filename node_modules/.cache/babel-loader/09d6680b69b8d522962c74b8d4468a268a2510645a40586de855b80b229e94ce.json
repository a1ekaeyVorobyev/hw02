{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFullScreenEnabled = void 0;\nconst React = require(\"react\");\nconst key = {\n  fullscreenEnabled: 0,\n  fullscreenElement: 1,\n  requestFullscreen: 2,\n  exitFullscreen: 3,\n  fullscreenchange: 4,\n  fullscreenerror: 5\n};\nconst webkit = ['webkitFullscreenEnabled', 'webkitFullscreenElement', 'webkitRequestFullscreen', 'webkitExitFullscreen', 'webkitfullscreenchange', 'webkitfullscreenerror'];\nconst moz = ['mozFullScreenEnabled', 'mozFullScreenElement', 'mozRequestFullScreen', 'mozCancelFullScreen', 'mozfullscreenchange', 'mozfullscreenerror'];\nconst ms = ['msFullscreenEnabled', 'msFullscreenElement', 'msRequestFullscreen', 'msExitFullscreen', 'MSFullscreenChange', 'MSFullscreenError'];\nconst document = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\nconst vendor = 'fullscreenEnabled' in document && Object.keys(key) || webkit[0] in document && webkit || moz[0] in document && moz || ms[0] in document && ms || [];\nclass fscreen {\n  static requestFullscreen(element) {\n    return element[vendor[key.requestFullscreen]]();\n  }\n  static requestFullscreenFunction(element) {\n    return element[vendor[key.requestFullscreen]];\n  }\n  static get exitFullscreen() {\n    return document[vendor[key.exitFullscreen]].bind(document);\n  }\n  static addEventListener(type, handler, options) {\n    return document.addEventListener(vendor[key[type]], handler, options);\n  }\n  static removeEventListener(type, handler, options) {\n    return document.removeEventListener(vendor[key[type]], handler, options);\n  }\n  static get fullscreenEnabled() {\n    return Boolean(document[vendor[key.fullscreenEnabled]]);\n  }\n  static set fullscreenEnabled(val) {}\n  static get fullscreenElement() {\n    return document[vendor[key.fullscreenElement]];\n  }\n  static set fullscreenElement(val) {}\n  static get onfullscreenchange() {\n    return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()];\n  }\n  static set onfullscreenchange(handler) {\n    document[`on${vendor[key.fullscreenchange]}`.toLowerCase()] = handler;\n  }\n  static get onfullscreenerror() {\n    return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()];\n  }\n  static set onfullscreenerror(handler) {\n    document[`on${vendor[key.fullscreenerror]}`.toLowerCase()] = handler;\n  }\n}\n;\nconst getFullScreenEnabled = () => {\n  return fscreen.fullscreenEnabled;\n};\nexports.getFullScreenEnabled = getFullScreenEnabled;\nclass FullScreen extends React.Component {\n  constructor(props) {\n    super(props);\n    this.detectFullScreen = () => {\n      if (this.props.onChange) {\n        this.props.onChange(!!fscreen.fullscreenElement);\n      }\n      if (this.props.onOpen && !!fscreen.fullscreenElement) {\n        this.props.onOpen();\n      }\n      if (this.props.onClose && !fscreen.fullscreenElement) {\n        this.props.onClose();\n      }\n    };\n    this.enterFullScreen = () => {\n      fscreen.requestFullscreen(this.node);\n    };\n    this.leaveFullScreen = () => {\n      fscreen.exitFullscreen();\n    };\n  }\n  componentDidMount() {\n    fscreen.addEventListener('fullscreenchange', this.detectFullScreen, {});\n  }\n  componentWillUnmount() {\n    fscreen.removeEventListener('fullscreenchange', this.detectFullScreen, {});\n  }\n  componentDidUpdate() {\n    this.handleProps(this.props);\n  }\n  handleProps(props) {\n    const enabled = fscreen.fullscreenElement;\n    if (enabled && !props.enabled) {\n      this.leaveFullScreen();\n    } else if (!enabled && props.enabled) {\n      this.enterFullScreen();\n    }\n  }\n  render() {\n    return React.createElement(\"div\", {\n      className: \"FullScreen\",\n      ref: node => this.node = node,\n      style: {\n        height: '100%',\n        width: '100%'\n      }\n    }, this.props.children);\n  }\n}\nexports.default = FullScreen;\nFullScreen.defaultProps = {\n  enabled: false\n};","map":{"version":3,"names":["React","require","key","fullscreenEnabled","fullscreenElement","requestFullscreen","exitFullscreen","fullscreenchange","fullscreenerror","webkit","moz","ms","document","window","vendor","Object","keys","fscreen","element","requestFullscreenFunction","bind","addEventListener","type","handler","options","removeEventListener","Boolean","val","onfullscreenchange","toLowerCase","onfullscreenerror","getFullScreenEnabled","exports","FullScreen","Component","constructor","props","detectFullScreen","onChange","onOpen","onClose","enterFullScreen","node","leaveFullScreen","componentDidMount","componentWillUnmount","componentDidUpdate","handleProps","enabled","render","createElement","className","ref","style","height","width","children","default","defaultProps"],"sources":["/home/a1eksey/project/Otus_ASP_React/homework02/temp-context/node_modules/react-fullscreen-crossbrowser/src/index.tsx"],"sourcesContent":["import * as React from 'react';\n\nconst key: any = {\n  fullscreenEnabled: 0,\n  fullscreenElement: 1,\n  requestFullscreen: 2,\n  exitFullscreen: 3,\n  fullscreenchange: 4,\n  fullscreenerror: 5,\n};\n\nconst webkit = [\n  'webkitFullscreenEnabled',\n  'webkitFullscreenElement',\n  'webkitRequestFullscreen',\n  'webkitExitFullscreen',\n  'webkitfullscreenchange',\n  'webkitfullscreenerror',\n];\n\nconst moz = [\n  'mozFullScreenEnabled',\n  'mozFullScreenElement',\n  'mozRequestFullScreen',\n  'mozCancelFullScreen',\n  'mozfullscreenchange',\n  'mozfullscreenerror',\n];\n\nconst ms = [\n  'msFullscreenEnabled',\n  'msFullscreenElement',\n  'msRequestFullscreen',\n  'msExitFullscreen',\n  'MSFullscreenChange',\n  'MSFullscreenError',\n];\n\n// so it doesn't throw if no window or document\nconst document: any = typeof window !== 'undefined' && typeof window.document !== 'undefined' ? window.document : {};\n\nconst vendor = (\n  ('fullscreenEnabled' in document && Object.keys(key)) ||\n  (webkit[0] in document && webkit) ||\n  (moz[0] in document && moz) ||\n  (ms[0] in document && ms) ||\n  []\n);\n\nclass fscreen {\n  static requestFullscreen(element: any) { return element[vendor[key.requestFullscreen]]() };\n  static requestFullscreenFunction(element: any) { return element[vendor[key.requestFullscreen]] };\n  static get exitFullscreen() {\n    return document[vendor[key.exitFullscreen]].bind(document);\n  };\n  static addEventListener(type: any, handler: any, options: any) { return document.addEventListener(vendor[key[type]], handler, options) };\n  static removeEventListener(type: any, handler: any, options: any) { return document.removeEventListener(vendor[key[type]], handler, options) };\n  static get fullscreenEnabled() {\n    return Boolean(document[vendor[key.fullscreenEnabled]]);\n  };\n  static set fullscreenEnabled(val) {\n  };\n  static get fullscreenElement() {\n    return document[vendor[key.fullscreenElement]];\n  };\n  static set fullscreenElement(val) {\n  };\n  static get onfullscreenchange() {\n    return document[`on${vendor[key.fullscreenchange]}`.toLowerCase()];\n  };\n  static set onfullscreenchange(handler) {\n    document[`on${vendor[key.fullscreenchange]}`.toLowerCase()] = handler;\n  };\n  static get onfullscreenerror() {\n    return document[`on${vendor[key.fullscreenerror]}`.toLowerCase()];\n  };\n  static set onfullscreenerror(handler) {\n    document[`on${vendor[key.fullscreenerror]}`.toLowerCase()] = handler;\n  };\n};\n\nexport type IFullScreenProps = {\n  onClose?: () => void,\n  onOpen?: () => void,\n  onChange?: (state: boolean) => void,\n  enabled?: boolean\n};\n\n/**\n *  The returned value indicates whether fullscreen mode is supported by the browser or not.\n *  If the value is true, it means fullscreen is enabled and supported.\n *  If the value is false, it means fullscreen is not enabled or supported.\n */\nexport const getFullScreenEnabled = () => {\n  // It returns the value of the fullscreenEnabled property from the fscreen object.\n  return fscreen.fullscreenEnabled;\n};\n\nexport default class FullScreen extends React.Component<React.PropsWithChildren<IFullScreenProps>, never> {\n  static defaultProps = {\n    enabled: false,\n  };\n  node: any;\n\n  constructor(props: IFullScreenProps) {\n    super(props);\n\n  }\n\n  componentDidMount() {\n    fscreen.addEventListener('fullscreenchange', this.detectFullScreen, {});\n  }\n\n  componentWillUnmount() {\n    fscreen.removeEventListener('fullscreenchange', this.detectFullScreen, {});\n  }\n\n  componentDidUpdate() {\n    this.handleProps(this.props);\n  }\n\n  handleProps(props: IFullScreenProps) {\n    const enabled = fscreen.fullscreenElement;\n    if (enabled && !props.enabled) {\n      this.leaveFullScreen();\n    } else if (!enabled && props.enabled) {\n      this.enterFullScreen();\n    }\n  }\n\n  detectFullScreen = () => {\n    if (this.props.onChange) {\n      this.props.onChange(!!fscreen.fullscreenElement);\n    }\n    if (this.props.onOpen && !!fscreen.fullscreenElement) {\n      this.props.onOpen();\n    }\n    if (this.props.onClose && !fscreen.fullscreenElement) {\n      this.props.onClose();\n    }\n\n  }\n\n  enterFullScreen = () => {\n    fscreen.requestFullscreen(this.node);\n  }\n\n  leaveFullScreen = () => {\n    fscreen.exitFullscreen();\n  }\n\n  render() {\n    return (\n      <div\n        className=\"FullScreen\"\n        ref={node => (this.node = node)}\n        style={{ height: '100%', width: '100%' }}\n      >\n        {this.props.children}\n      </div>\n    );\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,KAAA,GAAAC,OAAA;AAEA,MAAMC,GAAG,GAAQ;EACfC,iBAAiB,EAAE,CAAC;EACpBC,iBAAiB,EAAE,CAAC;EACpBC,iBAAiB,EAAE,CAAC;EACpBC,cAAc,EAAE,CAAC;EACjBC,gBAAgB,EAAE,CAAC;EACnBC,eAAe,EAAE;CAClB;AAED,MAAMC,MAAM,GAAG,CACb,yBAAyB,EACzB,yBAAyB,EACzB,yBAAyB,EACzB,sBAAsB,EACtB,wBAAwB,EACxB,uBAAuB,CACxB;AAED,MAAMC,GAAG,GAAG,CACV,sBAAsB,EACtB,sBAAsB,EACtB,sBAAsB,EACtB,qBAAqB,EACrB,qBAAqB,EACrB,oBAAoB,CACrB;AAED,MAAMC,EAAE,GAAG,CACT,qBAAqB,EACrB,qBAAqB,EACrB,qBAAqB,EACrB,kBAAkB,EAClB,oBAAoB,EACpB,mBAAmB,CACpB;AAGD,MAAMC,QAAQ,GAAQ,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACD,QAAQ,KAAK,WAAW,GAAGC,MAAM,CAACD,QAAQ,GAAG,EAAE;AAEpH,MAAME,MAAM,GACT,mBAAmB,IAAIF,QAAQ,IAAIG,MAAM,CAACC,IAAI,CAACd,GAAG,CAAC,IACnDO,MAAM,CAAC,CAAC,CAAC,IAAIG,QAAQ,IAAIH,MAAO,IAChCC,GAAG,CAAC,CAAC,CAAC,IAAIE,QAAQ,IAAIF,GAAI,IAC1BC,EAAE,CAAC,CAAC,CAAC,IAAIC,QAAQ,IAAID,EAAG,IACzB,EACD;AAED,MAAMM,OAAO;EACX,OAAOZ,iBAAiBA,CAACa,OAAY;IAAI,OAAOA,OAAO,CAACJ,MAAM,CAACZ,GAAG,CAACG,iBAAiB,CAAC,CAAC,EAAE;EAAC;EACzF,OAAOc,yBAAyBA,CAACD,OAAY;IAAI,OAAOA,OAAO,CAACJ,MAAM,CAACZ,GAAG,CAACG,iBAAiB,CAAC,CAAC;EAAC;EAC/F,WAAWC,cAAcA,CAAA;IACvB,OAAOM,QAAQ,CAACE,MAAM,CAACZ,GAAG,CAACI,cAAc,CAAC,CAAC,CAACc,IAAI,CAACR,QAAQ,CAAC;EAC5D;EACA,OAAOS,gBAAgBA,CAACC,IAAS,EAAEC,OAAY,EAAEC,OAAY;IAAI,OAAOZ,QAAQ,CAACS,gBAAgB,CAACP,MAAM,CAACZ,GAAG,CAACoB,IAAI,CAAC,CAAC,EAAEC,OAAO,EAAEC,OAAO,CAAC;EAAC;EACvI,OAAOC,mBAAmBA,CAACH,IAAS,EAAEC,OAAY,EAAEC,OAAY;IAAI,OAAOZ,QAAQ,CAACa,mBAAmB,CAACX,MAAM,CAACZ,GAAG,CAACoB,IAAI,CAAC,CAAC,EAAEC,OAAO,EAAEC,OAAO,CAAC;EAAC;EAC7I,WAAWrB,iBAAiBA,CAAA;IAC1B,OAAOuB,OAAO,CAACd,QAAQ,CAACE,MAAM,CAACZ,GAAG,CAACC,iBAAiB,CAAC,CAAC,CAAC;EACzD;EACA,WAAWA,iBAAiBA,CAACwB,GAAG,GAChC;EACA,WAAWvB,iBAAiBA,CAAA;IAC1B,OAAOQ,QAAQ,CAACE,MAAM,CAACZ,GAAG,CAACE,iBAAiB,CAAC,CAAC;EAChD;EACA,WAAWA,iBAAiBA,CAACuB,GAAG,GAChC;EACA,WAAWC,kBAAkBA,CAAA;IAC3B,OAAOhB,QAAQ,CAAC,KAAKE,MAAM,CAACZ,GAAG,CAACK,gBAAgB,CAAC,EAAE,CAACsB,WAAW,EAAE,CAAC;EACpE;EACA,WAAWD,kBAAkBA,CAACL,OAAO;IACnCX,QAAQ,CAAC,KAAKE,MAAM,CAACZ,GAAG,CAACK,gBAAgB,CAAC,EAAE,CAACsB,WAAW,EAAE,CAAC,GAAGN,OAAO;EACvE;EACA,WAAWO,iBAAiBA,CAAA;IAC1B,OAAOlB,QAAQ,CAAC,KAAKE,MAAM,CAACZ,GAAG,CAACM,eAAe,CAAC,EAAE,CAACqB,WAAW,EAAE,CAAC;EACnE;EACA,WAAWC,iBAAiBA,CAACP,OAAO;IAClCX,QAAQ,CAAC,KAAKE,MAAM,CAACZ,GAAG,CAACM,eAAe,CAAC,EAAE,CAACqB,WAAW,EAAE,CAAC,GAAGN,OAAO;EACtE;;AACD;AAcM,MAAMQ,oBAAoB,GAAGA,CAAA,KAAK;EAEvC,OAAOd,OAAO,CAACd,iBAAiB;AAClC,CAAC;AAHY6B,OAAA,CAAAD,oBAAoB,GAAAA,oBAAA;AAKjC,MAAqBE,UAAW,SAAQjC,KAAK,CAACkC,SAA2D;EAMvGC,YAAYC,KAAuB;IACjC,KAAK,CAACA,KAAK,CAAC;IAyBd,KAAAC,gBAAgB,GAAG,MAAK;MACtB,IAAI,IAAI,CAACD,KAAK,CAACE,QAAQ,EAAE;QACvB,IAAI,CAACF,KAAK,CAACE,QAAQ,CAAC,CAAC,CAACrB,OAAO,CAACb,iBAAiB,CAAC;;MAElD,IAAI,IAAI,CAACgC,KAAK,CAACG,MAAM,IAAI,CAAC,CAACtB,OAAO,CAACb,iBAAiB,EAAE;QACpD,IAAI,CAACgC,KAAK,CAACG,MAAM,EAAE;;MAErB,IAAI,IAAI,CAACH,KAAK,CAACI,OAAO,IAAI,CAACvB,OAAO,CAACb,iBAAiB,EAAE;QACpD,IAAI,CAACgC,KAAK,CAACI,OAAO,EAAE;;IAGxB,CAAC;IAED,KAAAC,eAAe,GAAG,MAAK;MACrBxB,OAAO,CAACZ,iBAAiB,CAAC,IAAI,CAACqC,IAAI,CAAC;IACtC,CAAC;IAED,KAAAC,eAAe,GAAG,MAAK;MACrB1B,OAAO,CAACX,cAAc,EAAE;IAC1B,CAAC;EA1CD;EAEAsC,iBAAiBA,CAAA;IACf3B,OAAO,CAACI,gBAAgB,CAAC,kBAAkB,EAAE,IAAI,CAACgB,gBAAgB,EAAE,EAAE,CAAC;EACzE;EAEAQ,oBAAoBA,CAAA;IAClB5B,OAAO,CAACQ,mBAAmB,CAAC,kBAAkB,EAAE,IAAI,CAACY,gBAAgB,EAAE,EAAE,CAAC;EAC5E;EAEAS,kBAAkBA,CAAA;IAChB,IAAI,CAACC,WAAW,CAAC,IAAI,CAACX,KAAK,CAAC;EAC9B;EAEAW,WAAWA,CAACX,KAAuB;IACjC,MAAMY,OAAO,GAAG/B,OAAO,CAACb,iBAAiB;IACzC,IAAI4C,OAAO,IAAI,CAACZ,KAAK,CAACY,OAAO,EAAE;MAC7B,IAAI,CAACL,eAAe,EAAE;KACvB,MAAM,IAAI,CAACK,OAAO,IAAIZ,KAAK,CAACY,OAAO,EAAE;MACpC,IAAI,CAACP,eAAe,EAAE;;EAE1B;EAuBAQ,MAAMA,CAAA;IACJ,OACEjD,KAAA,CAAAkD,aAAA;MACEC,SAAS,EAAC,YAAY;MACtBC,GAAG,EAAEV,IAAI,IAAK,IAAI,CAACA,IAAI,GAAGA,IAAK;MAC/BW,KAAK,EAAE;QAAEC,MAAM,EAAE,MAAM;QAAEC,KAAK,EAAE;MAAM;IAAE,GAEvC,IAAI,CAACnB,KAAK,CAACoB,QAAQ,CAChB;EAEV;;AA/DFxB,OAAA,CAAAyB,OAAA,GAAAxB,UAAA;AACSA,UAAA,CAAAyB,YAAY,GAAG;EACpBV,OAAO,EAAE;CACV"},"metadata":{},"sourceType":"script","externalDependencies":[]}