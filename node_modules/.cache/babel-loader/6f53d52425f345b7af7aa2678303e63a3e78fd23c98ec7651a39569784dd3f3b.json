{"ast":null,"code":"var _jsxFileName = \"/home/a1eksey/project/Otus_ASP_React/homework02/homework02/src/Hooks/useThemeContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { createContext, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n;\nconst defaultState = {\n  darkMode: true,\n  setDarkMode: () => {}\n};\n\n// register the context\nconst ThemeContext = /*#__PURE__*/createContext(defaultState);\n/**\n * export custom provider\n * @param {boolean} darkMode\n * @returns\n */\nexport function ThemeProvider({\n  children\n}) {\n  _s();\n  /** usePersistedState for storing state in local store */\n  // const [darkMode, setDarkMode] = useState(false);\n  //const [darkMode, setDarkMode] = usePersistedState(\"darkmode\", 'false');\n  const themeContext = useContext(ThemeContext);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: themeContext,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n// export a custom hook to use this specific context\n_s(ThemeProvider, \"Y26/CnccTa0PRifJ8EfxHm0U6Rk=\");\n_c = ThemeProvider;\nexport function useThemeContext() {\n  _s2();\n  return useContext(ThemeContext);\n}\n_s2(useThemeContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["createContext","useContext","jsxDEV","_jsxDEV","defaultState","darkMode","setDarkMode","ThemeContext","ThemeProvider","children","_s","themeContext","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useThemeContext","_s2","$RefreshReg$"],"sources":["/home/a1eksey/project/Otus_ASP_React/homework02/homework02/src/Hooks/useThemeContext.tsx"],"sourcesContent":["import { useState, createContext, useContext } from \"react\";\nimport usePersistedState from \"./usePersistedState\";\n\n\ninterface iThemeContext  {\n    darkMode: boolean;\n    setDarkMode: () => void;\n  };\n\n  const defaultState: iThemeContext = {\n    darkMode: true,\n    setDarkMode: () => {},\n  };\n  \n\n// register the context\nconst ThemeContext = createContext<iThemeContext>(defaultState);\n\n\ntype Props = {\n    children: string | JSX.Element | JSX.Element[];\n  };\n\n\n/**\n * export custom provider\n * @param {boolean} darkMode\n * @returns\n */\nexport function ThemeProvider({ children }:Props) {\n\n\n    \n  /** usePersistedState for storing state in local store */\n  // const [darkMode, setDarkMode] = useState(false);\n  //const [darkMode, setDarkMode] = usePersistedState(\"darkmode\", 'false');\n  const themeContext = useContext(ThemeContext);\n  return (\n    <ThemeContext.Provider value={themeContext}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\n// export a custom hook to use this specific context\nexport function useThemeContext() {\n  return useContext(ThemeContext);\n}"],"mappings":";;;AAAA,SAAmBA,aAAa,EAAEC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOzD;AAED,MAAMC,YAA2B,GAAG;EAClCC,QAAQ,EAAE,IAAI;EACdC,WAAW,EAAEA,CAAA,KAAM,CAAC;AACtB,CAAC;;AAGH;AACA,MAAMC,YAAY,gBAAGP,aAAa,CAAgBI,YAAY,CAAC;AAQ/D;AACA;AACA;AACA;AACA;AACA,OAAO,SAASI,aAAaA,CAAC;EAAEC;AAAe,CAAC,EAAE;EAAAC,EAAA;EAIhD;EACA;EACA;EACA,MAAMC,YAAY,GAAGV,UAAU,CAACM,YAAY,CAAC;EAC7C,oBACEJ,OAAA,CAACI,YAAY,CAACK,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAF,QAAA,EACxCA;EAAQ;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B;;AAEA;AAAAP,EAAA,CAfgBF,aAAa;AAAAU,EAAA,GAAbV,aAAa;AAgB7B,OAAO,SAASW,eAAeA,CAAA,EAAG;EAAAC,GAAA;EAChC,OAAOnB,UAAU,CAACM,YAAY,CAAC;AACjC;AAACa,GAAA,CAFeD,eAAe;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}